# -*- coding: utf-8 -*-
"""ngrok.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hXjSjcC7te0ThlJDRnYgT-ALyRyImPl9
"""

!pip install --quiet streamlit pyngrok transformers openai-whisper torch pyannote.audio rouge-score soundfile

# Commented out IPython magic to ensure Python compatibility.
# %%writefile app.py
# import streamlit as st
# import whisper
# from transformers import pipeline
# import torch
# from pyannote.audio import Pipeline
# from rouge_score import rouge_scorer
# from huggingface_hub import login
# import soundfile as sf
# 
# # 🔐 Authenticate Hugging Face
# login(token="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")
# 
# # 🎙 Title
# st.title("🎙 Smart Meeting Summarizer + Diarization + ROUGE")
# st.write("Upload a meeting audio file (.wav or .mp3) to get transcript, speaker diarization, summary and ROUGE scores.")
# 
# # 📁 File upload
# audio_file = st.file_uploader("Upload Audio File", type=["wav", "mp3"])
# 
# if audio_file is not None:
#     st.audio(audio_file)
#     with open("temp.wav", "wb") as f:
#         f.write(audio_file.getbuffer())
# 
# # 1️⃣ Transcription
# st.info("⏳ Transcribing audio with Whisper…")
# model = whisper.load_model("tiny")
# result = model.transcribe("temp.wav")
# transcript = result["text"]
# st.subheader("🗣 Transcript")
# st.write(transcript)
# 
# 
# # 2️⃣ Speaker Diarization
# from huggingface_hub import login
# login("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")
# try:
#     st.info("⏳ Running speaker diarization…")
#     diarization_pipeline = Pipeline.from_pretrained("pyannote/speaker-diarization")
#     diarization = diarization_pipeline("temp.wav")
#     diarization_text = ""
#     for turn, _, speaker in diarization.itertracks(yield_label=True):
#         diarization_text += f"[{turn.start:.1f}s – {turn.end:.1f}s] Speaker {speaker}\n"
#     st.subheader("🧑‍🤝‍🧑 Speaker Diarization")
#     st.text(diarization_text)
# except Exception as e:
#     diarization_text = "❌ Diarization failed – check token access to model."
#     st.error(str(e))
# 
# # 3️⃣ Summarization
# st.info("⏳ Generating summary with T5…")
# summarizer = pipeline("summarization", model="t5-small", device=-1)
# chunks = [transcript[i:i+500] for i in range(0, len(transcript), 500)]
# summary_text = ""
# for chunk in chunks:
#     summary = summarizer(chunk, max_length=100, min_length=30, do_sample=False)
#     summary_text += summary[0]["summary_text"] + " "
# summary_text = summary_text.strip()
# st.subheader("📋 Summary")
# st.success(summary_text)
# 
# # 4️⃣ ROUGE Evaluation
# st.info("📊 Computing ROUGE metrics…")
# scorer = rouge_scorer.RougeScorer(["rouge1", "rouge2", "rougeL"], use_stemmer=True)
# scores = scorer.score(transcript, summary_text)
# 
# # Correct way to format for Streamlit JSON display
# rouge_dict = {}
# for metric, score in scores.items():
#     rouge_dict[metric] = {
#         "precision": round(score.precision, 4),
#         "recall": round(score.recall, 4),
#         "fmeasure": round(score.fmeasure, 4)
#     }
# 
# st.subheader("📈 ROUGE Results")
# st.json(rouge_dict)
# 
# 
# # 5️⃣ Save Results
# open("transcript.txt","w").write(transcript)
# open("summary.txt","w").write(summary_text)
# open("diarization.txt","w").write(diarization_text)
# 
# # 6️⃣ Download Buttons
# st.download_button("⬇️ Download Transcript", transcript, "transcript.txt")
# st.download_button("⬇️ Download Summary", summary_text, "summary.txt")
# st.download_button("⬇️ Download Diarization", diarization_text, "diarization.txt")
# 
# st.success("✅ All tasks completed successfully!")
#

!pkill -f ngrok
!killall ngrok
!rm -rf /root/.ngrok2/ngrok.yml

!ngrok config add-authtoken 33CWksxhfZ3xucTDV5FbIHv9C8T_7PgH5QDLEr2ZnHTrK2KS6

!streamlit run app.py &>/dev/null&

from pyngrok import ngrok

# Start Streamlit on port 8501
public_url = ngrok.connect(8501).public_url
print(f"✅ Public URL: {public_url}")